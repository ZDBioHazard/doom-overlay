Index: src/gameconfigfile.cpp
===================================================================
--- src/gameconfigfile.cpp	(revision 3157)
+++ src/gameconfigfile.cpp	(working copy)
@@ -160,35 +160,9 @@
 		SetValueForKey ("Path", "$DOOMWADDIR", true);
 	}
 
-	// Create auto-load sections, so users know what's available.
-	// Note that this totem pole is the reverse of the order that
-	// they will appear in the file.
-	CreateSectionAtStart("Harmony.Autoload");
-	CreateSectionAtStart("UrbanBrawl.Autoload");
-	CreateSectionAtStart("Chex3.Autoload");
-	CreateSectionAtStart("Chex.Autoload");
-	CreateSectionAtStart("Strife.Autoload");
-	CreateSectionAtStart("HexenDemo.Autoload");
-	CreateSectionAtStart("HexenDK.Autoload");
-	CreateSectionAtStart("Hexen.Autoload");
-	CreateSectionAtStart("Heretic.Autoload");
-	CreateSectionAtStart("FreeDM.Autoload");
-	CreateSectionAtStart("Freedoom1.Autoload");
-	CreateSectionAtStart("Freedoom.Autoload");
-	CreateSectionAtStart("Plutonia.Autoload");
-	CreateSectionAtStart("TNT.Autoload");
-	CreateSectionAtStart("Doom2.Autoload");
-	CreateSectionAtStart("Doom1.Autoload");
-	CreateSectionAtStart("Doom.Autoload");
+	// Create auto-load section, so users know it's available.
 	CreateSectionAtStart("Global.Autoload");
 
-	// The same goes for auto-exec files.
-	CreateStandardAutoExec("Chex.AutoExec", true);
-	CreateStandardAutoExec("Strife.AutoExec", true);
-	CreateStandardAutoExec("Hexen.AutoExec", true);
-	CreateStandardAutoExec("Heretic.AutoExec", true);
-	CreateStandardAutoExec("Doom.AutoExec", true);
-
 	// Move search paths back to the top.
 	MoveSectionToStart("FileSearch.Directories");
 	MoveSectionToStart("IWADSearch.Directories");
@@ -201,20 +175,10 @@
 		"# These are the directories to search for wads added with the -file\n"
 		"# command line parameter, if they cannot be found with the path\n"
 		"# as-is. Layout is the same as for IWADSearch.Directories\n");
-	SetSectionNote("Doom.AutoExec",
-		"# Files to automatically execute when running the corresponding game.\n"
-		"# Each file should be on its own line, preceded by Path=\n\n");
 	SetSectionNote("Global.Autoload",
 		"# WAD files to always load. These are loaded after the IWAD but before\n"
 		"# any files added with -file. Place each file on its own line, preceded\n"
 		"# by Path=\n");
-	SetSectionNote("Doom.Autoload",
-		"# Wad files to automatically load depending on the game and IWAD you are\n"
-		"# playing.  You may have have files that are loaded for all similar IWADs\n"
-		"# (the game) and files that are only loaded for particular IWADs. For example,\n"
-		"# any files listed under Doom.Autoload will be loaded for any version of Doom,\n"
-		"# but files listed under Doom2.Autoload will only load when you are\n"
-		"# playing Doom 2.\n\n");
 }
 
 FGameConfigFile::~FGameConfigFile ()
@@ -358,14 +322,15 @@
 	subsection = section + countof(section) - sublen - 1;
 	section[countof(section) - 1] = '\0';
 	
-	strncpy (subsection, "UnknownConsoleVariables", sublen);
-	if (SetSection (section))
+	// [Bio] Gah! All this really similar code!
+	// I want to collapse it into a loop! D:
+
+	if (SetSection ("Global.UnknownConsoleVariables"))
 	{
 		ReadCVars (0);
 	}
 
-	strncpy (subsection, "ConsoleVariables", sublen);
-	if (SetSection (section))
+	if (SetSection ("Global.ConsoleVariables"))
 	{
 		ReadCVars (0);
 	}
@@ -377,14 +342,12 @@
 
 	// The NetServerInfo section will be read when it's determined that
 	// a netgame is being played.
-	strncpy (subsection, "LocalServerInfo", sublen);
-	if (SetSection (section))
+	if (SetSection ("Global.LocalServerInfo"))
 	{
 		ReadCVars (0);
 	}
 
-	strncpy (subsection, "Player", sublen);
-	if (SetSection (section))
+	if (SetSection ("Global.Player"))
 	{
 		ReadCVars (0);
 	}
@@ -394,8 +357,7 @@
 		C_SetDefaultBindings ();
 	}
 
-	strncpy (subsection, "Bindings", sublen);
-	if (SetSection (section))
+	if (SetSection ("Global.Bindings"))
 	{
 		Bindings.UnbindAll();
 		while (NextInSection (key, value))
@@ -404,8 +366,7 @@
 		}
 	}
 
-	strncpy (subsection, "DoubleBindings", sublen);
-	if (SetSection (section))
+	if (SetSection ("Global.DoubleBindings"))
 	{
 		DoubleBindings.UnbindAll();
 		while (NextInSection (key, value))
@@ -414,8 +375,7 @@
 		}
 	}
 
-	strncpy (subsection, "AutomapBindings", sublen);
-	if (SetSection (section))
+	if (SetSection ("Global.AutomapBindings"))
 	{
 		AutomapBindings.UnbindAll();
 		while (NextInSection (key, value))
@@ -424,8 +384,7 @@
 		}
 	}
 
-	strncpy (subsection, "ConsoleAliases", sublen);
-	if (SetSection (section))
+	if (SetSection ("Global.ConsoleAliases"))
 	{
 		const char *name = NULL;
 		while (NextInSection (key, value))
@@ -445,8 +404,7 @@
 
 void FGameConfigFile::ReadNetVars ()
 {
-	strncpy (subsection, "NetServerInfo", sublen);
-	if (SetSection (section))
+	if (SetSection ("Global.NetServerInfo"))
 	{
 		ReadCVars (0);
 	}
@@ -473,52 +431,39 @@
 
 void FGameConfigFile::ArchiveGameData (const char *gamename)
 {
-	char section[32*3], *subsection;
-
-	sublen = countof(section) - 1 - mysnprintf (section, countof(section), "%s.", gamename);
-	subsection = section + countof(section) - 1 - sublen;
-
-	strncpy (subsection, "Player", sublen);
-	SetSection (section, true);
+	SetSection ("Global.Player", true);
 	ClearCurrentSection ();
 	C_ArchiveCVars (this, 4);
 
-	strncpy (subsection, "ConsoleVariables", sublen);
-	SetSection (section, true);
+	SetSection ("Global.ConsoleVariables", true);
 	ClearCurrentSection ();
 	C_ArchiveCVars (this, 0);
 
-	strncpy (subsection, netgame ? "NetServerInfo" : "LocalServerInfo", sublen);
 	if (!netgame || consoleplayer == 0)
 	{ // Do not overwrite this section if playing a netgame, and
 	  // this machine was not the initial host.
-		SetSection (section, true);
+		SetSection (netgame ? "Global.NetServerInfo" : "Global.LocalServerInfo", true);
 		ClearCurrentSection ();
 		C_ArchiveCVars (this, 5);
 	}
 
-	strncpy (subsection, "UnknownConsoleVariables", sublen);
-	SetSection (section, true);
+	SetSection ("Global.UnknownConsoleVariables", true);
 	ClearCurrentSection ();
 	C_ArchiveCVars (this, 2);
 
-	strncpy (subsection, "ConsoleAliases", sublen);
-	SetSection (section, true);
+	SetSection ("Global.ConsoleAliases", true);
 	ClearCurrentSection ();
 	C_ArchiveAliases (this);
 
 	M_SaveCustomKeys (this, section, subsection, sublen);
 
-	strcpy (subsection, "Bindings");
-	SetSection (section, true);
+	SetSection ("Global.Bindings", true);
 	Bindings.ArchiveBindings (this);
 
-	strncpy (subsection, "DoubleBindings", sublen);
-	SetSection (section, true);
+	SetSection ("Global.DoubleBindings", true);
 	DoubleBindings.ArchiveBindings (this);
 
-	strncpy (subsection, "AutomapBindings", sublen);
-	SetSection (section, true);
+	SetSection ("Global.AutomapBindings", true);
 	AutomapBindings.ArchiveBindings (this);
 }
 
@@ -621,42 +566,11 @@
 #endif
 }
 
-void FGameConfigFile::CreateStandardAutoExec(const char *section, bool start)
-{
-	if (!SetSection(section))
-	{
-		FString path;
-#ifdef __APPLE__
-		char cpath[PATH_MAX];
-		FSRef folder;
-		
-		if (noErr == FSFindFolder(kUserDomain, kDocumentsFolderType, kCreateFolder, &folder) &&
-			noErr == FSRefMakePath(&folder, (UInt8*)cpath, PATH_MAX))
-		{
-			path << cpath << "/" GAME_DIR "/autoexec.cfg";
-		}
-#elif !defined(unix)
-		path = "$PROGDIR/autoexec.cfg";
-#else
-		path = GetUserFile ("autoexec.cfg");
-#endif
-		SetSection (section, true);
-		SetValueForKey ("Path", path.GetChars());
-	}
-	if (start)
-	{
-		MoveSectionToStart(section);
-	}
-}
-
 void FGameConfigFile::AddAutoexec (DArgs *list, const char *game)
 {
-	char section[64];
 	const char *key;
 	const char *value;
 
-	mysnprintf (section, countof(section), "%s.AutoExec", game);
-
 	if (bMigrating)
 	{
 		FBaseCVar *autoexec = FindCVar ("autoexec", NULL);
@@ -669,7 +583,7 @@
 			val = autoexec->GetGenericRep (CVAR_String);
 			path = copystring (val.String);
 			delete autoexec;
-			SetSection (section, true);
+			SetSection ("Global.AutoExec", true);
 			SetValueForKey ("Path", path);
 			list->AppendArg (path);
 			delete[] path;
@@ -677,10 +591,7 @@
 	}
 	else
 	{
-		// If <game>.AutoExec section does not exist, create it
-		// with a default autoexec.cfg file present.
-		CreateStandardAutoExec(section, false);
-		// Run any files listed in the <game>.AutoExec section
+		// Run any files listed in the Global.AutoExec section
 		if (!SectionIsEmpty())
 		{
 			while (NextInSection (key, value))
Index: src/gameconfigfile.h
===================================================================
--- src/gameconfigfile.h	(revision 3157)
+++ src/gameconfigfile.h	(working copy)
@@ -55,7 +55,6 @@
 
 protected:
 	void WriteCommentHeader (FILE *file) const;
-	void CreateStandardAutoExec (const char *section, bool start);
 
 private:
 	static void MigrateStub (const char *pathname, FConfigFile *config, void *userdata);
